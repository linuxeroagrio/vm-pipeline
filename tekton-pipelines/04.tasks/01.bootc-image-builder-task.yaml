apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: bootc-image-builder
  namespace: vm-pipelines
spec:
  description: Builds bootc OS Image from config.toml
  params:
  - default: $(params.SOURCE_IMAGE_NAME)
    description: Reference of the source RHEL bootc image
    name: SOURCE_IMAGE
    type: string
  - default: $(params.SOURCE_IMAGE_TAG)
    description: Reference of the bootc image tag.
    name: SOURCE_IMAGE_TAG
    type: string
  - default: quay.io/centos-bootc/bootc-image-builder:latest
    description: The location of the buildah builder image.
    name: BUILDER_IMAGE
    type: string
  - default: qcow2
    description: Output format for the image
    name: DEST_FORMAT
    type: string
  - default: xfs
    description: Root File System Type
    name: ROOTFS_TYPE
    type: string
  - default: |
      [[customizations.user]]
      name = "admin"
      password = "admin"
      groups = ["wheel"]

      [[customizations.user]]
      name = "test"
      password = "test"
    description: config.toml content for customizations
    name: CONFIG_TOML_CONTENT
    type: string
  - default: ./config.toml
    description: config.toml file relative location to toml-workspace workspace. This
      takes precedence over the "CONFIG_TOML_CONTENT" parameter when toml-workspace
      workspace is mounted.
    name: WS_TOML_FILE
    type: string
  - default: "true"
    description: TLS Verification
    name: TLS_VERIFY
    type: string
  - default: ""
    description: AWS AMI Name
    name: AWS_AMI_NAME
    type: string
  - default: ""
    description: AWS S3 Bucket
    name: AWS_S3_BUCKET
    type: string
  - default: ""
    description: AWS S3 Region
    name: AWS_S3_REGION
    type: string
  steps:
  - computeResources: {}
    image: quay.io/podman/stable:latest
    name: bootc-image-builder
    script: |
      #!/usr/bin/env bash
      set -xe

      BUILD_COMMAND="--rootfs $(params.ROOTFS_TYPE) --type $(params.DEST_FORMAT) --tls-verify=$(params.TLS_VERIFY) $(params.SOURCE_IMAGE):$(params.SOURCE_IMAGE_TAG)"

      PODMAN_COMMAND="podman run \
      --device /dev/fuse:rw \
      --rm \
      -it \
      --privileged \
      --pull=newer \
      --security-opt label=type:unconfined_t \
      -v $(pwd)/output:/output \
      -v /root/.docker/config.json:/run/containers/0/auth.json \
      -v /var/lib/containers/storage:/var/lib/containers/storage"

      if [[ "$(workspaces.dockerconfig.bound)" == "true" ]]; then

        # if config.json exists at workspace root, we use that
        if test -f "$(workspaces.dockerconfig.path)/config.json"; then
          export DOCKER_CONFIG="$(workspaces.dockerconfig.path)"

        # else we look for .dockerconfigjson at the root
        elif test -f "$(workspaces.dockerconfig.path)/.dockerconfigjson"; then
          mkdir -p $HOME/.docker/
          cp "$(workspaces.dockerconfig.path)/.dockerconfigjson" "$HOME/.docker/config.json"
          export DOCKER_CONFIG="$HOME/.docker"

        # need to error out if neither files are present
        else
          echo "neither 'config.json' nor '.dockerconfigjson' found at workspace root"
          exit 1
        fi
      fi

      if [[ "$(params.DEST_FORMAT)" == "ami" ]]; then
        if [[ "$(workspaces.awscredentials.bound)" == "true" ]]; then
          if test -f "$(workspaces.awscredentials.path)/credentials"; then
            mkdir -p $HOME/.aws/
            cp "$(workspaces.awscredentials.path)/credentials" "$HOME/.aws/credentials"
            BUILD_COMMAND="--aws-ami-name $(params.AWS_AMI_NAME) --aws-bucket $(params.AWS_S3_BUCKET) --aws-region $(params.AWS_S3_REGION) $BUILD_COMMAND"
          else
            echo "AWS Credentials must be populated"
            exit 1
          fi
        fi
      fi

      if [[ "$(workspaces.toml-workspace.bound)" == "true" ]]; then
        if test -f "$(workspaces.toml-workspace.path)/$(params.WS_TOML_FILE)"; then
          cat $(workspaces.toml-workspace.path)/$(params.WS_TOML_FILE) > config.toml
          BUILD_COMMAND="--config /config.toml $BUILD_COMMAND"
          PODMAN_COMMAND="$PODMAN_COMMAND -v ./config.toml:/config.toml:ro"
        else
          echo "Toml file not found"
          exit 1
        fi
      else
        if [[ ! -z '$(params.CONFIG_TOML_CONTENT)' ]]; then
          echo '$(params.CONFIG_TOML_CONTENT)' > config.toml
          BUILD_COMMAND="--config /config.toml $BUILD_COMMAND"
          PODMAN_COMMAND="$PODMAN_COMMAND -v ./config.toml:/config.toml:ro"
        fi
      fi

      mkdir -p output

      podman pull $(params.SOURCE_IMAGE):$(params.SOURCE_IMAGE_TAG)

      $PODMAN_COMMAND \
      $(params.BUILDER_IMAGE) \
      $BUILD_COMMAND
    securityContext:
      capabilities:
        add:
        - SETFCAP
      privileged: true
    volumeMounts:
    - mountPath: /var/lib/containers
      name: varlibcontainers
    - mountPath: /dev/fuse
      name: fuse
    workingDir: $(workspaces.main-workspace.path)
  volumes:
  - emptyDir: {}
    name: varlibcontainers
  - hostPath:
      path: /dev/fuse
    name: fuse
  workspaces:
  - name: main-workspace
  - description: An optional workspace that allows providing a .docker/config.json
      file to access the container registry. The file should be placed at the root
      of the Workspace with name config.json or .dockerconfigjson.
    name: dockerconfig
    optional: true
  - description: AWS Credentials file to use for AMI Uploading
    name: awscredentials
    optional: true
  - description: An optional workspace that contains toml file
    name: toml-workspace
    optional: true
